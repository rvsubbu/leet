'''
Project Euler, Problem #29: Distinct Powers
Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
    2^2=4, 2^3=8, 2^4=16, 2^5=32
    3^2=9, 3^3=27, 3^4=81, 3^5=243
    4^2=16, 4^3=64, 4^4=256, 4^5=1024
    5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?
'''

def distinct_powers(low, high):
    import pdb; pdb.set_trace()
    seen = set()
    distinct = 0
    for i in range(low,high):
        if i in seen:
            continue
        j = i
        power = 1
        tmp = set()
        while j < high:
            tmp = tmp.union(set([power*i for i in range(low,high)]))
            seen.add(j)
            power += 1
            j *= i
        distinct += len(tmp)
    return distinct

print(distinct_powers(2,5))
print(distinct_powers(2,100))

import time

start = time.time()
seen = set()

distinct = 0
low = 2
high = 101
for i in range(low,high):
    if i in seen:
        continue
    j = i
    power = 1
    tmp = set()
    while j < high:
        tmp = tmp.union(set([power*i for i in range(low,high)]))
        power += 1
        seen.add(j)
        j *= i
    distinct += len(tmp)
print(distinct)
print(time.time()-start)

start = time.time()
powers = set()
for i in range(low, high):
    for j in range(low, high):
        powers.add(i**j)
print(len(powers))
print(time.time()-start)

